--- origsrc/pcre2-10.32/src/sljit/sljitConfigInternal.h	2019-01-04 08:39:11.000000000 -0500
+++ src/pcre2-10.32/src/sljit/sljitConfigInternal.h	2019-04-04 20:51:00.431640600 -0400
@@ -582,13 +582,13 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_sw sljit_
 #elif (defined SLJIT_CONFIG_X86_64 && SLJIT_CONFIG_X86_64)
 
 #define SLJIT_NUMBER_OF_REGISTERS 13
-#ifndef _WIN64
+#if !defined _WIN64 && !defined __CYGWIN__
 #define SLJIT_NUMBER_OF_SAVED_REGISTERS 6
 #define SLJIT_LOCALS_OFFSET_BASE 0
-#else /* _WIN64 */
+#else /* _WIN64 || __CYGWIN__ */
 #define SLJIT_NUMBER_OF_SAVED_REGISTERS 8
 #define SLJIT_LOCALS_OFFSET_BASE (compiler->locals_offset)
-#endif /* !_WIN64 */
+#endif /* !_WIN64 && !__CYGWIN__ */
 #define SLJIT_PREF_SHIFT_REG SLJIT_R3
 
 #elif (defined SLJIT_CONFIG_ARM_V5 && SLJIT_CONFIG_ARM_V5) || (defined SLJIT_CONFIG_ARM_V7 && SLJIT_CONFIG_ARM_V7)
@@ -662,7 +662,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_sw sljit_
 	(SLJIT_NUMBER_OF_REGISTERS - SLJIT_NUMBER_OF_SAVED_REGISTERS)
 
 #define SLJIT_NUMBER_OF_FLOAT_REGISTERS 6
-#if (defined SLJIT_CONFIG_X86_64 && SLJIT_CONFIG_X86_64) && (defined _WIN64)
+#if (defined SLJIT_CONFIG_X86_64 && SLJIT_CONFIG_X86_64) && (defined _WIN64 || defined __CYGWIN__)
 #define SLJIT_NUMBER_OF_SAVED_FLOAT_REGISTERS 1
 #else
 #define SLJIT_NUMBER_OF_SAVED_FLOAT_REGISTERS 0
--- origsrc/pcre2-10.32/src/sljit/sljitLir.h	2018-08-13 06:19:17.000000000 -0400
+++ src/pcre2-10.32/src/sljit/sljitLir.h	2019-04-04 20:58:46.479492100 -0400
@@ -401,7 +401,7 @@ struct sljit_compiler {
 
 #if (defined SLJIT_CONFIG_X86_64 && SLJIT_CONFIG_X86_64)
 	sljit_s32 mode32;
-#ifdef _WIN64
+#if defined _WIN64 || defined __CYGWIN__
 	sljit_s32 locals_offset;
 #endif
 #endif
--- origsrc/pcre2-10.32/src/sljit/sljitNativeX86_32.c	2018-03-13 12:15:23.000000000 -0400
+++ src/pcre2-10.32/src/sljit/sljitNativeX86_32.c	2019-04-04 20:52:34.200195300 -0400
@@ -173,7 +173,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 
 	compiler->local_size = local_size;
 
-#ifdef _WIN32
+#if defined _WIN32 || defined __CYGWIN__
 	if (local_size > 0) {
 		if (local_size <= 4 * 4096) {
 			if (local_size > 4096)
@@ -217,7 +217,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 		FAIL_IF(emit_non_cum_binary(compiler, BINARY_OPCODE(SUB),
 			SLJIT_SP, 0, SLJIT_SP, 0, SLJIT_IMM, local_size + sizeof(sljit_sw)));
 
-#if defined _WIN32 && !(defined SLJIT_X86_32_FASTCALL && SLJIT_X86_32_FASTCALL)
+#if (defined _WIN32 || defined __CYGWIN__) && !(defined SLJIT_X86_32_FASTCALL && SLJIT_X86_32_FASTCALL)
 		if (compiler->local_size > 1024)
 			FAIL_IF(emit_cum_binary(compiler, BINARY_OPCODE(ADD),
 				TMP_REG1, 0, TMP_REG1, 0, SLJIT_IMM, sizeof(sljit_sw)));
--- origsrc/pcre2-10.32/src/sljit/sljitNativeX86_64.c	2018-03-13 12:15:23.000000000 -0400
+++ src/pcre2-10.32/src/sljit/sljitNativeX86_64.c	2019-04-04 20:53:36.809570300 -0400
@@ -85,7 +85,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 
 	compiler->mode32 = 0;
 
-#ifdef _WIN64
+#if defined _WIN64 || defined __CYGWIN__
 	/* Two/four register slots for parameters plus space for xmm6 register if needed. */
 	if (fscratches >= 6 || fsaveds >= 1)
 		compiler->locals_offset = 6 * sizeof(sljit_sw);
@@ -126,7 +126,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 
 		INC_SIZE(size);
 
-#ifndef _WIN64
+#if !defined _WIN64 && !defined __CYGWIN__
 		if (args > 0) {
 			inst[0] = REX_W;
 			inst[1] = MOV_r_rm;
@@ -168,7 +168,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 	local_size = ((local_size + SLJIT_LOCALS_OFFSET + saved_register_size + 15) & ~15) - saved_register_size;
 	compiler->local_size = local_size;
 
-#ifdef _WIN64
+#if defined _WIN64 || defined __CYGWIN__
 	if (local_size > 0) {
 		if (local_size <= 4 * 4096) {
 			if (local_size > 4096)
@@ -207,7 +207,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 			SLJIT_SP, 0, SLJIT_SP, 0, SLJIT_IMM, local_size));
 	}
 
-#ifdef _WIN64
+#if defined _WIN64 || defined __CYGWIN__
 	/* Save xmm6 register: movaps [rsp + 0x20], xmm6 */
 	if (fscratches >= 6 || fsaveds >= 1) {
 		inst = (sljit_u8*)ensure_buf(compiler, 1 + 5);
@@ -231,7 +231,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 	CHECK(check_sljit_set_context(compiler, options, arg_types, scratches, saveds, fscratches, fsaveds, local_size));
 	set_set_context(compiler, options, arg_types, scratches, saveds, fscratches, fsaveds, local_size);
 
-#ifdef _WIN64
+#if defined _WIN64 || defined __CYGWIN__
 	/* Two/four register slots for parameters plus space for xmm6 register if needed. */
 	if (fscratches >= 6 || fsaveds >= 1)
 		compiler->locals_offset = 6 * sizeof(sljit_sw);
@@ -255,7 +255,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 
 	FAIL_IF(emit_mov_before_return(compiler, op, src, srcw));
 
-#ifdef _WIN64
+#if defined _WIN64 || defined __CYGWIN__
 	/* Restore xmm6 register: movaps xmm6, [rsp + 0x20] */
 	if (compiler->fscratches >= 6 || compiler->fsaveds >= 1) {
 		inst = (sljit_u8*)ensure_buf(compiler, 1 + 5);
@@ -552,7 +552,7 @@ static sljit_u8* emit_x86_instruction(st
 /*  Call / return instructions                                           */
 /* --------------------------------------------------------------------- */
 
-#ifndef _WIN64
+#if !defined _WIN64 && !defined __CYGWIN__
 
 static sljit_s32 call_with_args(struct sljit_compiler *compiler, sljit_s32 arg_types, sljit_s32 *src_ptr, sljit_sw srcw)
 {
--- origsrc/pcre2-10.32/src/sljit/sljitNativeX86_common.c	2018-03-13 12:15:23.000000000 -0400
+++ src/pcre2-10.32/src/sljit/sljitNativeX86_common.c	2019-04-04 20:55:17.090820300 -0400
@@ -93,7 +93,7 @@ static const sljit_u8 reg_map[SLJIT_NUMB
 /* Note: r12 & 0x7 == 0b100, which decoded as SIB byte present
    Note: avoid to use r12 and r13 for memory addessing
    therefore r12 is better to be a higher saved register. */
-#ifndef _WIN64
+#if !defined _WIN64 && !defined __CYGWIN__
 /* Args: rdi(=7), rsi(=6), rdx(=2), rcx(=1), r8, r9. Scratches: rax(=0), r10, r11 */
 static const sljit_u8 reg_map[SLJIT_NUMBER_OF_REGISTERS + 4] = {
 	0, 0, 6, 7, 1, 8, 11, 10, 12, 5, 13, 14, 15, 3, 4, 2, 9
@@ -128,7 +128,7 @@ static const sljit_u8 freg_lmap[SLJIT_NU
 #define REX_B		0x41
 #define REX		0x40
 
-#ifndef _WIN64
+#if !defined _WIN64 && !defined __CYGWIN__
 #define HALFWORD_MAX 0x7fffffffl
 #define HALFWORD_MIN -0x80000000l
 #else
@@ -766,7 +766,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 	case SLJIT_DIV_UW:
 	case SLJIT_DIV_SW:
 #if (defined SLJIT_CONFIG_X86_64 && SLJIT_CONFIG_X86_64)
-#ifdef _WIN64
+#if defined _WIN64 || defined __CYGWIN__
 		SLJIT_ASSERT(
 			reg_map[SLJIT_R0] == 0
 			&& reg_map[SLJIT_R1] == 2
@@ -783,7 +783,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 
 		op = GET_OPCODE(op);
 		if ((op | 0x2) == SLJIT_DIV_UW) {
-#if (defined SLJIT_CONFIG_X86_32 && SLJIT_CONFIG_X86_32) || defined(_WIN64)
+#if (defined SLJIT_CONFIG_X86_32 && SLJIT_CONFIG_X86_32) || defined(_WIN64) || defined(__CYGWIN__)
 			EMIT_MOV(compiler, TMP_REG1, 0, SLJIT_R1, 0);
 			inst = emit_x86_instruction(compiler, 1, SLJIT_R1, 0, SLJIT_R1, 0);
 #else
@@ -794,7 +794,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 		}
 
 		if ((op | 0x2) == SLJIT_DIV_SW) {
-#if (defined SLJIT_CONFIG_X86_32 && SLJIT_CONFIG_X86_32) || defined(_WIN64)
+#if (defined SLJIT_CONFIG_X86_32 && SLJIT_CONFIG_X86_32) || defined(_WIN64) || defined(__CYGWIN__)
 			EMIT_MOV(compiler, TMP_REG1, 0, SLJIT_R1, 0);
 #endif
 
@@ -826,7 +826,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 		*inst++ = GROUP_F7;
 		*inst = MOD_REG | ((op >= SLJIT_DIVMOD_UW) ? reg_map[TMP_REG1] : reg_map[SLJIT_R1]);
 #else
-#ifdef _WIN64
+#if defined _WIN64 || defined __CYGWIN__
 		size = (!compiler->mode32 || op >= SLJIT_DIVMOD_UW) ? 3 : 2;
 #else
 		size = (!compiler->mode32) ? 3 : 2;
@@ -834,7 +834,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 		inst = (sljit_u8*)ensure_buf(compiler, 1 + size);
 		FAIL_IF(!inst);
 		INC_SIZE(size);
-#ifdef _WIN64
+#if defined _WIN64 || defined __CYGWIN__
 		if (!compiler->mode32)
 			*inst++ = REX_W | ((op >= SLJIT_DIVMOD_UW) ? REX_B : 0);
 		else if (op >= SLJIT_DIVMOD_UW)
@@ -864,7 +864,7 @@ SLJIT_API_FUNC_ATTRIBUTE sljit_s32 sljit
 			*inst |= IDIV;
 			break;
 		}
-#if (defined SLJIT_CONFIG_X86_64 && SLJIT_CONFIG_X86_64) && !defined(_WIN64)
+#if (defined SLJIT_CONFIG_X86_64 && SLJIT_CONFIG_X86_64) && !defined(_WIN64) && !defined(__CYGWIN__)
 		if (op <= SLJIT_DIVMOD_SW)
 			EMIT_MOV(compiler, SLJIT_R1, 0, TMP_REG1, 0);
 #else
